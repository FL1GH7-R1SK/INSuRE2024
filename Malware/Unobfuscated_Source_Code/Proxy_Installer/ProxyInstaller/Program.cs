using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Security.Principal;
using System.Windows;

namespace ProxyInstaller
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var name = Assembly.GetExecutingAssembly().GetManifestResourceNames();
            Console.WriteLine("Assembly loaded: {0}", name[0].ToString());

            var RetrieveRealProgramName = name[0].ToString().Split(new[] { '.' }, 2);
            var RealProgramName = RetrieveRealProgramName[1];
            Console.WriteLine("Real program name: {0}", RealProgramName);

            // Check eleveation status
            // https://github.com/dotnet/sdk/blob/v6.0.100/src/Cli/dotnet/Installer/Windows/WindowsUtils.cs#L38
            var identity = WindowsIdentity.GetCurrent();
            var principal = new WindowsPrincipal(identity);
            var isAdmin = principal.IsInRole(WindowsBuiltInRole.Administrator);

            if (isAdmin)
            {
                Console.WriteLine("Admin privileges detected continuing");
            }
            else
            {
                Console.WriteLine("Insufficient privileges, please run as administrator!");
                string messageBoxText = "Insufficient privileges, please run as administrator!";
                string caption = RealProgramName;
                MessageBoxButton button = MessageBoxButton.OK;
                MessageBoxImage icon = MessageBoxImage.Error;
                MessageBoxResult result;

                result = MessageBox.Show(messageBoxText, caption, button, icon, MessageBoxResult.Yes);
                return;
            }


            var RealProgramPath = $"C:\\Windows\\Temp\\{RealProgramName}";
            Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name[0]);
            FileStream fileStream = new FileStream(RealProgramPath, FileMode.Create);
            for (int i = 0; i < stream.Length; i++)
                fileStream.WriteByte((byte)stream.ReadByte());
            fileStream.Close();

            Process.Start(RealProgramPath);

            Console.WriteLine("Doing my sus activities");


            Console.ReadKey();

        }
    }
}
